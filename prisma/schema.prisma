generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id
  email     String   @unique
  name      String?
  role      String   @default("user") // "admin", "user", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(uuid())
  name          String
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[] @relation("SubcategoryToCategory")
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String
  category   Category  @relation("SubcategoryToCategory", fields: [categoryId], references: [id])
  products   Product[] @relation("SubcategoryToProduct")

  @@index([categoryId])
}

model Provider {
  id        String    @id @default(uuid())
  name      String
  products  Product[] @relation("ProviderToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  categoryId    String
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategoryId String
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  providerId    String?
  provider      Provider?   @relation("ProviderToProduct", fields: [providerId], references: [id])
  name          String
  nameTag       String
  description   String      @db.VarChar(800)
  price         Decimal
  offerPrice    Decimal?
  hasOffer      Boolean     @default(false)
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  stock         Int         @default(0)
  images        Image[]
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([providerId])
}

model Order {
  id         String      @id @default(uuid())
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  formData   Json? // Customer information as JSON
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@index([orderId])
  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// model Size {
//   id          String    @id @default(uuid())
//   storeId     String    // Foreign Key to Store
//   store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
//   name        String
//   value       String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@index([storeId])
// }

// model Color {
//   id          String   @id @default(uuid())
//   storeId     String   // Foreign Key to Store
//   store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
//   name        String
//   value       String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@index([storeId])
// }
